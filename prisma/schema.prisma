// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  phone        String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  appointments Appointment[]

  @@map("user")
}

model Barber {
  id           String        @id @default(uuid())
  name         String
  cpf          String        @unique
  phone        String
  email        String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  appointments Appointment[]

  @@map("barber")
}

model Appointment {
  id           String   @id @default(uuid())
  id_user      String
  id_barber    String
  haircut_date DateTime
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  barber Barber @relation(fields: [id_barber], references: [id])
  user   User   @relation(fields: [id_user], references: [id])

  // Defina a relação muitos-para-muitos com Haircut
  Haircuts HaircutAppointment[]

  @@map("appointment")
}

model Haircut {
  id           String               @id @default(uuid())
  name         String               @unique
  price        Int
  // Defina a relação muitos-para-muitos com Appointment
  appointments HaircutAppointment[]

  @@map("haircut")
}

// Tabela de junção para a relação muitos-para-muitos
model HaircutAppointment {
  id_appointment String
  id_haircut     String

  appointment Appointment @relation(fields: [id_appointment], references: [id])
  haircut     Haircut     @relation(fields: [id_haircut], references: [id])

  @@unique([id_appointment, id_haircut])
  @@map("haircut_appointment")
}
